;; choose a bed surface from a pre-configured list
[menu __main __setup __bed_surface]
type: input
name: Bed: { printer.save_variables.variables.bed_surfaces[menu.input | int] }
input: { printer.save_variables.variables.bed_surfaces.index(printer.save_variables.variables.selected_bed_surface) | float }
input_min: 0.0
input_max: { ((printer.save_variables.variables.bed_surfaces | length) - 1) | float }
input_step: 1.0
gcode:
    SAVE_VARIABLE VARIABLE=selected_bed_surface VALUE="'{ printer.save_variables.variables.bed_surfaces[menu.input | int] }'"

;; tunes the Z offset from the setup menu, saves the offset
;; can be performed while not actively printing
[menu __main __setup __offsetz]
type: input
name: Offset Z:{ '%05.3f' % menu.input }
input: { printer.save_variables.variables["bed_surface_offsets." + printer.save_variables.variables.selected_bed_surface] | float }
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    RESPOND TYPE=command MSG="{ 'bed surface: %s, offset: %r' % (printer.save_variables.variables.selected_bed_surface, menu.input) }"
    SET_GCODE_OFFSET Z={ '%.3f' % menu.input } MOVE={ 1 if printer.toolhead.homed_axes == 'XYZ' else 0 }
    SAVE_VARIABLE VARIABLE=bed_surface_offsets.{ printer.save_variables.variables.selected_bed_surface } VALUE={ '%.3f' % menu.input }

;; tunes the Z offset from the tune menu, saves the offset
[menu __main __tune __offsetz]
type: input
name: Offset Z:{ '%05.3f' % menu.input }
input: { printer.gcode_move.homing_origin.z }
input_min: -5
input_max: 5
input_step: 0.005
realtime: True
gcode:
    RESPOND TYPE=command MSG="{ 'bed surface: %s, offset: %r' % (printer.save_variables.variables.selected_bed_surface, menu.input) }"
    SET_GCODE_OFFSET Z={ '%.3f' % menu.input } MOVE=1
    SAVE_VARIABLE VARIABLE=bed_surface_offsets.{ printer.save_variables.variables.selected_bed_surface } VALUE={ '%.3f' % menu.input }

[menu __main __control __force_z]
type: command
enable: {printer.idle_timeout.state != "Printing"}
name: Force Z 10
gcode:
  FORCE_MOVE STEPPER=stepper_z DISTANCE=10 VELOCITY=10

[menu __main __setup __calib]
type: list
enable: False
name: Calibration

[menu __main __setup __level]
type: list
enable: {printer.idle_timeout.state != "Printing"}
name: Bed Screws Adjust

[menu __main __setup __level __start]
type: command
name: Start
gcode:
    {% if 'xyz' not in printer.toolhead.homed_axes %}
      G28 ; home axes
    {% endif %}
    BED_SCREWS_ADJUST

[menu __main __setup __level __accept]
type: command
name: Accept
gcode: ACCEPT

[menu __main __setup __level __adjusted]
type: command
name: Adjusted
gcode: ADJUSTED

[menu __main __setup __level __abort]
type: command
name: Abort
gcode: ABORT

[menu __main __filament __loadf]
type: command
name: Load Fil. fast
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E50 F500
    RESTORE_GCODE_STATE NAME=__filament__load
    
[menu __main __filament __unloadf]
type: command
name: Unload Fil.fast
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E-50 F500
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __filament __smart_unload]
type: command
name: Smart Unload
gcode:
    SAVE_GCODE_STATE NAME=__filament__load
    M83
    G1 E10 F300                    ; extrude a little to soften tip
    G1 E-60 F720                  ; retract some, but not too much or it will jam
    RESTORE_GCODE_STATE NAME=__filament__load

[menu __main __setup __reset_air_filter]
type: command
name: Reset air filter
gcode:
    RESET_AIR_FILTER


[menu __main __setup meshBed]
type: list
enable: {not printer.idle_timeout.state == "Printing"}
name: Mesh Bed Level
	
[menu __main __setup meshBed start]
type: command
name: Start Callibration
gcode: 
	G28
	BED_MESH_CALIBRATE
	TESTZ Z=-5

[menu __main __setup meshBed zposition]
type: input
enable: {not printer.idle_timeout.state == "Printing"}
name: Z Pos=:{'%05.3f' % menu.input}
input: {printer.toolhead.position.z}
input_step: 1.0

[menu __main __setup meshBed zDown]
type: command
name: Down
gcode: TESTZ Z=-0.1

[menu __main __setup meshBed zNudgeDown]
type: command
name: Nudge Down
gcode: TESTZ Z=-0.025

[menu __main __setup meshBed zNudgeUp]
type: command
name: Nudge Up
gcode: TESTZ Z=0.025

[menu __main __setup meshBed zUp]
type: command
name: Up
gcode: TESTZ Z=0.1

[menu __main __setup meshBed next]
type: command
name: Next
gcode: 
	ACCEPT
	TESTZ Z=-5
	
[menu __main __setup meshBed save]
type: command
name: Save & Restart
gcode: SAVE_CONFIG

	
[menu __main __host]
type: list
name: Host

[menu __main __host __estop]
type: list
name: E-Stop

[menu __main __host __estop estop_spacer]
type: command
name:  

[menu __main __host __estop estop]
type: command
name: Confirm E-Stop
gcode: {action_emergency_stop()}

[menu __main __host shutdown]
type: command
name: Shutdown
enable: {printer.idle_timeout.state != "Printing"}
gcode: {action_call_remote_method("shutdown_machine")}

[menu __main __octoprint]
type: disabled

[menu __main pause]
type: command
enable: {printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused}
name: Pause
gcode: PAUSE

[menu __main resume]
type: command
enable: {printer.idle_timeout.state == "Printing" and printer.pause_resume.is_paused}
name: Resume
gcode: RESUME

[menu __main __sdcard]
type: list
enable: False
name: SD Card

